var searchIndex = {};
searchIndex["abomonation"] = {"doc":"Abomonation (spelling intentional) is a fast serialization / deserialization crate.","items":[[5,"encode","abomonation","Encodes a typed reference into a binary buffer.",null,{"inputs":[{"name":"t"},{"name":"vec"}],"output":null}],[5,"decode","","Decodes a mutable binary slice into an immutable typed reference.",null,null],[8,"Abomonation","","Abomonation provides methods to serialize any heap data the implementor owns.",null,null],[11,"entomb","","Write any additional information about `&amp;self` beyond its binary representation.",0,null],[11,"embalm","","Perform any final edits before committing `&amp;mut self`. Importantly, this method should only\nmanipulate the fields of `self`; any owned memory may not be valid.",0,null],[11,"exhume","","Recover any information for `&amp;mut self` not evident from its binary representation.",0,null],[11,"embalm","core::option","",1,null],[11,"entomb","","",1,null],[11,"exhume","","",1,null],[11,"embalm","collections::string","",2,null],[11,"entomb","","",2,null],[11,"exhume","","",2,null],[11,"embalm","collections::vec","",3,null],[11,"entomb","","",3,null],[11,"exhume","","",3,null],[11,"embalm","alloc::boxed","",4,null],[11,"entomb","","",4,null],[11,"exhume","","",4,null],[14,"unsafe_abomonate!","abomonation","The `unsafe_abomonate!` macro takes a type name with an optional list of fields, and implements\n`Abomonation` for the type, following the pattern of the tuple implementations: each method\ncalls the equivalent method on each of its fields.",null,null]],"paths":[[8,"Abomonation"],[4,"Option"],[3,"String"],[3,"Vec"],[3,"Box"]]};
initSearch(searchIndex);
